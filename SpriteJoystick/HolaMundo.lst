ca65 V2.18 - Ubuntu 2.18-1
Main file   : HolaMundo.s
Current file: HolaMundo.s

000000r 1               .linecont       +               ; Permitir continuar lineas
000000r 1               .feature        c_comments      /* Soportar comentarios tipo C */
000000r 1               
000000r 1               ;Definir el segmento HEADER para que FCEUX reconozca el archivo .nes
000000r 1               ;como una imagen valida de un cartucho de NES
000000r 1               
000000r 1               .segment "HEADER"
000000r 1               
000000r 1               ; Configurar con Mapper NROM 0 con bancos fijos
000000r 1  4E 45 53 1A    .byte 'N', 'E', 'S', $1A    ; Firma de NES para el emulador
000004r 1  02             .byte $02                   ; PRG tiene 16k
000005r 1  01             .byte $01                   ; CHR tiene 8k (archivo chr)
000006r 1  00             .byte %00000000             ;NROM Mapper 0
000007r 1  00 00 00 00    .byte $0, $0, $0, $0, $0, $0
00000Br 1  00 00        
00000Dr 1               ; Fin del header
00000Dr 1               ;; Este Header se encuentra definido en el archivo link.x el cual
00000Dr 1               ;; define donde va a quedar en el archivo .NES final
00000Dr 1               
00000Dr 1               
00000Dr 1               ;Incluir el binario con las imagenes de la rom de caracteres
00000Dr 1               .segment "IMG"
000000r 1  00 00 00 00  .incbin "letras.chr"
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
002000r 1               
002000r 1               
002000r 1               ;Declaracion de variables en la pagina 0
002000r 1               ;; Esto es RWM (RAM), por ende se "reservan" bytes
002000r 1               ;; para luego ser usados como variables.
002000r 1               .segment "ZEROPAGE"
000000r 1  xx           	posX: .res 1
000001r 1  xx           	posY: .res 1
000002r 1  xx               JoystickPress: .res 1
000003r 1               
000003r 1               ;;Segmento de codigo guardado en la ROM
000003r 1               .segment "CODE"
000000r 1               
000000r 1               ;Rutina de interrupcion (IRQ)
000000r 1               ;No es utilizada por ahora
000000r 1               irq:
000000r 1  40           	rti
000001r 1               
000001r 1               ;;Rutina de interrupcion (Reset)
000001r 1               ;;; Esta rutina se dispara cuando el nintendo se enciende
000001r 1               ;;; o se aprieta el boton de reset. Se encarga de inicializar
000001r 1               ;;; el hardware
000001r 1               reset:
000001r 1  78             SEI          ; desactivar IRQs
000002r 1  D8             CLD          ; desactivar modo decimal
000003r 1               
000003r 1               ;;Durante el encendido del Nintendo hay que respetar unos tiempos
000003r 1                 ;;hasta que el PPU se encuentra listo para ser utilizado.
000003r 1                 ;;A continuacion se siguen los pasos sugeridos en:
000003r 1                 ;; https://wiki.nesdev.com/w/index.php/Init_code
000003r 1  A2 40          LDX #$40
000005r 1  8E 17 40       STX $4017    ; disable APU frame IRQ
000008r 1  A2 FF          LDX #$FF
00000Ar 1  9A             TXS          ; Set up stack
00000Br 1  E8             INX          ; now X = 0
00000Cr 1  8E 00 20       STX $2000    ; disable NMI
00000Fr 1  8E 01 20       STX $2001    ; disable rendering
000012r 1  8E 10 40       STX $4010    ; disable DMC IRQs
000015r 1               
000015r 1               vblankwait1:       ; First wait for vblank to make sure PPU is ready
000015r 1  2C 02 20       BIT $2002
000018r 1  10 FB          BPL vblankwait1
00001Ar 1               
00001Ar 1               clrmem:
00001Ar 1  A9 00          LDA #$00
00001Cr 1  95 00          STA $0000, x
00001Er 1  9D 00 01       STA $0100, x
000021r 1  9D 00 03       STA $0300, x
000024r 1  9D 00 04       STA $0400, x
000027r 1  9D 00 05       STA $0500, x
00002Ar 1  9D 00 06       STA $0600, x
00002Dr 1  9D 00 07       STA $0700, x
000030r 1  A9 FE          LDA #$FE
000032r 1  9D 00 02       STA $0200, x
000035r 1  E8             INX
000036r 1  D0 E2          BNE clrmem
000038r 1               
000038r 1               vblankwait2:      ; Second wait for vblank, PPU is ready after this
000038r 1  2C 02 20       BIT $2002
00003Br 1  10 FB          BPL vblankwait2
00003Dr 1               
00003Dr 1               
00003Dr 1                 ;;Cargamos la paleta de colores.
00003Dr 1  20 rr rr       JSR SUBPaleta
000040r 1               
000040r 1               
000040r 1               
000040r 1                 ;; Ahora que las paletas estan cargadas, podemos dibujar el fondo
000040r 1  20 rr rr       JSR SUBDibujaFondo
000043r 1               
000043r 1                 ;; Encendemos el PPU
000043r 1                 ;; y el barrido vertical
000043r 1                 ;; y apuntamos el PPU a
000043r 1                 ;; la tabla 0 de sprites
000043r 1                 ;; y 1 para fondos
000043r 1               
000043r 1  A9 80          LDA #%10000000
000045r 1  8D 00 20       STA $2000
000048r 1               
000048r 1                 ;; Encendemos Sprites, Background y sin clipping en lado izquierdo
000048r 1  A9 1E          LDA #%00011110
00004Ar 1  8D 01 20       STA $2001
00004Dr 1               
00004Dr 1                 ;;Apagamos el scroll del background (fondo)
00004Dr 1  A9 00          LDA #$00
00004Fr 1  8D 05 20       STA $2005
000052r 1  8D 05 20       STA $2005
000055r 1               
000055r 1                 ;;Habilitamos las interrupciones
000055r 1  58             CLI
000056r 1               
000056r 1                 ;Limpiamos la posX y posY
000056r 1  A9 00          LDA #0
000058r 1  85 rr          STA posX
00005Ar 1  85 rr          STA posY
00005Cr 1               
00005Cr 1                 ;En el sprite 0, cargamos la flecha ($41)
00005Cr 1                 ;el sprite almacena:
00005Cr 1                 ;	 Posicion Y
00005Cr 1                 ;	 Indice ($41)
00005Cr 1                 ;  Atributos: FlipH ; FlipV ; Prioridad; 3xNC ; Paleta (00~01~10~11)
00005Cr 1                 ;	 Posicion X
00005Cr 1  A9 41          LDA #$41
00005Er 1  8D 01 02       STA $0201 ;Indice
000061r 1  A9 00          LDA #%00000000
000063r 1  8D 02 02       STA $0202
000066r 1                 ;Luego PosX y PosY se avanzan durante NMI
000066r 1               
000066r 1               
000066r 1               
000066r 1               
000066r 1               fin:
000066r 1               
000066r 1  4C rr rr       jmp fin
000069r 1               ;Rutina de interrupcion (NMI)
000069r 1               ;Esta rutina se dispara cuando la pantalla
000069r 1               ;se dibujo por completo, y el barrido vertical
000069r 1               ;esta volviendo al inicio. Deberia poder utilizarse
000069r 1               ;solo por 2250 ciclos aprox. Deberia dispararse 25 veces
000069r 1               ;por segundo o 50 con interlaceado
000069r 1               nmi:
000069r 1                 ;;Guardamos en el stack el estado del CPU (flags y acumulador)
000069r 1  48             PHA
00006Ar 1  08             PHP
00006Br 1               
00006Br 1                 ;Leemos el joystick
00006Br 1  20 rr rr       JSR SUBReadJoy
00006Er 1                 ;Ahora JoystickPress tiene un valor distinto a cero
00006Er 1                 ;si se apreto algun boton. Miramos derecha, izquierda, arriba y abajo.
00006Er 1               
00006Er 1  A5 rr          LDA JoystickPress
000070r 1  29 04          AND #%00000100
000072r 1  F0 02          BEQ MiroAbajo
000074r 1                 ;Si no salta, apreto arriba
000074r 1  E6 rr          INC posY
000076r 1               
000076r 1               MiroAbajo:
000076r 1  A5 rr          LDA JoystickPress
000078r 1  29 08          AND #%00001000
00007Ar 1  F0 02          BEQ MiroDerecha
00007Cr 1  C6 rr          DEC posY
00007Er 1               
00007Er 1               MiroDerecha:
00007Er 1  A5 rr          LDA JoystickPress
000080r 1  29 01          AND #%00000001
000082r 1  F0 02          BEQ MiroIzquierda
000084r 1  E6 rr          INC posX
000086r 1               
000086r 1               MiroIzquierda:
000086r 1  A5 rr          LDA JoystickPress
000088r 1  29 02          AND #%00000010
00008Ar 1  F0 02          BEQ FinJoystick
00008Cr 1  C6 rr          DEC posX
00008Er 1               
00008Er 1               FinJoystick:
00008Er 1               
00008Er 1               
00008Er 1  A5 rr          LDA posX
000090r 1  8D 03 02       STA $0203
000093r 1  A5 rr          LDA posY
000095r 1  8D 00 02       STA $0200
000098r 1               
000098r 1                 ;Ahora debemos copiar el sprite a la PPU, usamos DMA para eso:
000098r 1               
000098r 1                   ;Dado que en $0200~$02ff tenemos cargados los sprites
000098r 1                 ;Utilizamos el DMA para transferir estos 256 bytes a memoria
000098r 1                 ;de video en la ubicacion de los sprites.
000098r 1  A9 00          LDA #$00
00009Ar 1  8D 03 20       STA $2003  ; cargamos en el DMA la parte baja de 0200
00009Dr 1  A9 02          LDA #$02
00009Fr 1  8D 14 40       STA $4014  ; cargamos en el DMA la parte alta de 0200 y comienza.
0000A2r 1                 ;Esto deberia bloquear el procesador hasta que termina.
0000A2r 1               
0000A2r 1                 ;;Ahora recuperamos el estado del CPU (flags y acumulador) y listo
0000A2r 1  28             PLP
0000A3r 1  68             PLA
0000A4r 1  40             RTI
0000A5r 1               
0000A5r 1               
0000A5r 1               ;;Rutina para leer el registro del Joystick tomada de
0000A5r 1               ;; https://wiki.nesdev.com/w/index.php/Controller_reading_code
0000A5r 1               JOYPAD1 = $4016
0000A5r 1               
0000A5r 1               SUBReadJoy:
0000A5r 1  A9 01            lda #$01
0000A7r 1                   ; While the strobe bit is set, buttons will be continuously reloaded.
0000A7r 1                   ; This means that reading from JOYPAD1 will only return the state of the
0000A7r 1                   ; first button: button A.
0000A7r 1  8D 16 40         sta JOYPAD1
0000AAr 1  85 rr            sta JoystickPress
0000ACr 1  4A               lsr a        ; now A is 0
0000ADr 1                   ; By storing 0 into JOYPAD1, the strobe bit is cleared and the reloading stops.
0000ADr 1                   ; This allows all 8 buttons (newly reloaded) to be read from JOYPAD1.
0000ADr 1  8D 16 40         sta JOYPAD1
0000B0r 1               loop:
0000B0r 1  AD 16 40         lda JOYPAD1
0000B3r 1  4A               lsr a	       ; bit 0 -> Carry
0000B4r 1  26 rr            rol JoystickPress  ; Carry -> bit 0; bit 7 -> Carry
0000B6r 1  90 F8            bcc loop
0000B8r 1  60               rts
0000B9r 1               
0000B9r 1               
0000B9r 1               
0000B9r 1               
0000B9r 1               ;; Esta rutina dibuja el fondo (Background Tiles).
0000B9r 1               SUBDibujaFondo:
0000B9r 1  AD 02 20       LDA $2002             ; Hay que leer el PPU para resetear la posicion
0000BCr 1  A9 20          LDA #$20
0000BEr 1  8D 06 20       STA $2006             ; Se carga la parte alta de $2000
0000C1r 1  A9 00          LDA #$00
0000C3r 1  8D 06 20       STA $2006             ; Se carga la parte baja de $2000
0000C6r 1  A2 00          LDX #$00
0000C8r 1               
0000C8r 1                 ;;Una pantalla entera tiene 32x30 tiles, o sea 960 bytes.
0000C8r 1                 ;;Pero el registro X es de 8 bits, por ende tenemos que cargar
0000C8r 1                 ;;de 256 bytes a la vez o usar modo indirecto indexado pero hay que
0000C8r 1                 ;;contar con 16 bits, asi que es mas facil cargarlo por partes.
0000C8r 1               
0000C8r 1                 ;;Cargamos los primeros 256 bytes
0000C8r 1               LoadBackgroundLoop:
0000C8r 1  BD rr rr       LDA MapaHolaMundo, x
0000CBr 1  8D 07 20       STA $2007              ;Grabamos el valor a PPU, que se autoincrementa
0000CEr 1  E8             INX                    ; incrementamos X para el loop.
0000CFr 1  D0 F7          BNE LoadBackgroundLoop ; Si X pego la vuelta, se cargaron 256 bytes.
0000D1r 1               
0000D1r 1               
0000D1r 1               
0000D1r 1               LoadBackgroundLoop256:
0000D1r 1  BD rr rr       LDA MapaHolaMundo+256, x
0000D4r 1  8D 07 20       STA $2007
0000D7r 1  E8             INX
0000D8r 1  D0 F7          BNE LoadBackgroundLoop256
0000DAr 1               
0000DAr 1               LoadBackgroundLoop512:
0000DAr 1  BD rr rr       LDA MapaHolaMundo+512, x
0000DDr 1  8D 07 20       STA $2007
0000E0r 1  E8             INX
0000E1r 1  D0 F7          BNE LoadBackgroundLoop512
0000E3r 1               
0000E3r 1                 ;;Este ultimo loop tiene que ir desde 768 hasta 960 solamente
0000E3r 1               
0000E3r 1               LoadBackgroundLoop192:
0000E3r 1  BD rr rr       LDA MapaHolaMundo+512+256, x
0000E6r 1  8D 07 20       STA $2007
0000E9r 1  E8             INX
0000EAr 1  E0 C0          CPX #192
0000ECr 1  D0 F5          BNE LoadBackgroundLoop192
0000EEr 1               
0000EEr 1                ;;Este loop carga los registros de atributos que estan a continuacion de los tiles.
0000EEr 1                ;;Comienza apuntando el PPU a la memoria de atributos correspondiente
0000EEr 1               
0000EEr 1               LoadAttribute:
0000EEr 1  AD 02 20       LDA $2002
0000F1r 1  A9 23          LDA #$23
0000F3r 1  8D 06 20       STA $2006
0000F6r 1  A9 C0          LDA #$C0
0000F8r 1  8D 06 20       STA $2006
0000FBr 1  A2 00          LDX #$00
0000FDr 1               
0000FDr 1                 ;;Ahora barremos los atributos y los vamos pasando al PPU
0000FDr 1               LoadAttributeLoop:
0000FDr 1  BD rr rr       LDA MapaHolaMundo+960, x
000100r 1  8D 07 20       STA $2007
000103r 1  E8             INX
000104r 1  E0 40          CPX #64
000106r 1  D0 F5          BNE LoadAttributeLoop
000108r 1               
000108r 1                 ;;Todo listo, podemos volver
000108r 1  60             RTS
000109r 1               
000109r 1               SUBPaleta:
000109r 1  A9 3F        	lda #$3f
00010Br 1  8D 06 20     	sta $2006
00010Er 1  A9 00        	lda #$00
000110r 1  8D 06 20     	sta $2006
000113r 1  A2 21        	ldx #$21
000115r 1  8E 07 20     	stx $2007
000118r 1  A9 14        	lda #$14
00011Ar 1  8D 07 20     	sta $2007
00011Dr 1  A9 10        	lda #$10
00011Fr 1  8D 07 20     	sta $2007
000122r 1  A9 30        	lda #$30
000124r 1  8D 07 20     	sta $2007
000127r 1  8E 07 20     	stx $2007
00012Ar 1  A9 01        	lda #$01
00012Cr 1  8D 07 20     	sta $2007
00012Fr 1  A9 21        	lda #$21
000131r 1  8D 07 20     	sta $2007
000134r 1  A9 31        	lda #$31
000136r 1  8D 07 20     	sta $2007
000139r 1  8E 07 20     	stx $2007
00013Cr 1  A9 06        	lda #$06
00013Er 1  8D 07 20     	sta $2007
000141r 1  A9 16        	lda #$16
000143r 1  8D 07 20     	sta $2007
000146r 1  A9 26        	lda #$26
000148r 1  8D 07 20     	sta $2007
00014Br 1  8E 07 20     	stx $2007
00014Er 1  A9 09        	lda #$09
000150r 1  8D 07 20     	sta $2007
000153r 1  A9 19        	lda #$19
000155r 1  8D 07 20     	sta $2007
000158r 1  A9 29        	lda #$29
00015Ar 1  8D 07 20     	sta $2007
00015Dr 1  60           	RTS
00015Er 1               
00015Er 1               
00015Er 1               MapaHolaMundo:
00015Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000162r 1  00 00 00 00  
000166r 1  00 00 00 00  
00016Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000172r 1  00 00 00 00  
000176r 1  00 00 00 00  
00017Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000182r 1  00 00 00 00  
000186r 1  00 00 00 00  
00018Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000192r 1  00 00 00 00  
000196r 1  00 00 00 00  
00019Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0001A2r 1  00 00 00 00  
0001A6r 1  00 00 00 00  
0001AEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0001B2r 1  00 00 00 00  
0001B6r 1  00 00 00 00  
0001BEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0001C2r 1  00 00 00 00  
0001C6r 1  00 00 00 00  
0001CEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0001D2r 1  00 00 00 00  
0001D6r 1  00 00 00 00  
0001DEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0001E2r 1  00 00 00 00  
0001E6r 1  00 00 00 00  
0001EEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0001F2r 1  00 00 00 00  
0001F6r 1  00 00 00 00  
0001FEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000202r 1  00 00 00 00  
000206r 1  00 00 00 00  
00020Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000212r 1  00 00 00 00  
000216r 1  00 00 00 00  
00021Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000222r 1  00 00 00 00  
000226r 1  00 00 00 00  
00022Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000232r 1  00 00 00 00  
000236r 1  00 00 00 00  
00023Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$28,$00,$2f,$00,$2c,$00,$21,$00
000242r 1  00 00 00 00  
000246r 1  28 00 2F 00  
00024Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000252r 1  00 00 00 00  
000256r 1  00 00 00 00  
00025Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000262r 1  00 00 00 00  
000266r 1  00 00 00 00  
00026Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000272r 1  00 00 00 00  
000276r 1  00 00 00 00  
00027Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$01,$01,$01,$2d,$35,$2e,$24,$2f,$01,$01
000282r 1  00 00 01 01  
000286r 1  01 2D 35 2E  
00028Er 1  01 00 00 00  	.byte $01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000292r 1  00 00 00 00  
000296r 1  00 00 00 00  
00029Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0002A2r 1  00 00 00 00  
0002A6r 1  00 00 00 00  
0002AEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0002B2r 1  00 00 00 00  
0002B6r 1  00 00 00 00  
0002BEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0002C2r 1  00 00 00 00  
0002C6r 1  00 00 00 00  
0002CEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0002D2r 1  00 00 00 00  
0002D6r 1  00 00 00 00  
0002DEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0002E2r 1  00 00 00 00  
0002E6r 1  00 00 00 00  
0002EEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0002F2r 1  00 00 00 00  
0002F6r 1  00 00 00 00  
0002FEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000302r 1  00 00 00 00  
000306r 1  00 00 00 00  
00030Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000312r 1  00 00 00 00  
000316r 1  00 00 00 00  
00031Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000322r 1  00 00 00 00  
000326r 1  00 00 00 00  
00032Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000332r 1  00 00 00 00  
000336r 1  00 00 00 00  
00033Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000342r 1  00 00 00 00  
000346r 1  00 00 00 00  
00034Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000352r 1  00 00 00 00  
000356r 1  00 00 00 00  
00035Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000362r 1  00 00 00 00  
000366r 1  00 00 00 00  
00036Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000372r 1  00 00 00 00  
000376r 1  00 00 00 00  
00037Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000382r 1  00 00 00 00  
000386r 1  00 00 00 00  
00038Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000392r 1  00 00 00 00  
000396r 1  00 00 00 00  
00039Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0003A2r 1  00 00 00 00  
0003A6r 1  00 00 00 00  
0003AEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0003B2r 1  00 00 00 00  
0003B6r 1  00 00 00 00  
0003BEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0003C2r 1  00 00 00 00  
0003C6r 1  00 00 00 00  
0003CEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0003D2r 1  00 00 00 00  
0003D6r 1  00 00 00 00  
0003DEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0003E2r 1  00 00 00 00  
0003E6r 1  00 00 00 00  
0003EEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0003F2r 1  00 00 00 00  
0003F6r 1  00 00 00 00  
0003FEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000402r 1  00 00 00 00  
000406r 1  00 00 00 00  
00040Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000412r 1  00 00 00 00  
000416r 1  00 00 00 00  
00041Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000422r 1  00 00 00 00  
000426r 1  00 00 00 00  
00042Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000432r 1  00 00 00 00  
000436r 1  00 00 00 00  
00043Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000442r 1  00 00 00 00  
000446r 1  00 00 00 00  
00044Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000452r 1  00 00 00 00  
000456r 1  00 00 00 00  
00045Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000462r 1  00 00 00 00  
000466r 1  00 00 00 00  
00046Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000472r 1  00 00 00 00  
000476r 1  00 00 00 00  
00047Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000482r 1  00 00 00 00  
000486r 1  00 00 00 00  
00048Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000492r 1  00 00 00 00  
000496r 1  00 00 00 00  
00049Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0004A2r 1  00 00 00 00  
0004A6r 1  00 00 00 00  
0004AEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0004B2r 1  00 00 00 00  
0004B6r 1  00 00 00 00  
0004BEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0004C2r 1  00 00 00 00  
0004C6r 1  00 00 00 00  
0004CEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0004D2r 1  00 00 00 00  
0004D6r 1  00 00 00 00  
0004DEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0004E2r 1  00 00 00 00  
0004E6r 1  00 00 00 00  
0004EEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0004F2r 1  00 00 00 00  
0004F6r 1  00 00 00 00  
0004FEr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000502r 1  00 00 00 00  
000506r 1  00 00 00 00  
00050Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000512r 1  00 00 00 00  
000516r 1  00 00 00 00  
00051Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000522r 1  00 00 00 00  
000526r 1  00 00 00 00  
00052Er 1  00 04 09 07  	.byte $00,$04,$09,$07,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000532r 1  01 00 00 00  
000536r 1  00 00 00 00  
00053Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000542r 1  00 00 00 00  
000546r 1  00 00 00 00  
00054Er 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000552r 1  00 00 00 00  
000556r 1  00 00 00 00  
00055Er 1               
00055Er 1               
00055Er 1               
00055Er 1               
00055Er 1               
00055Er 1               
00055Er 1               ; Direcciones para las ISR
00055Er 1               .segment "VECTORS"
000000r 1  rr rr        .word nmi
000002r 1  rr rr        .word reset
000004r 1  rr rr        .word irq
000004r 1               
