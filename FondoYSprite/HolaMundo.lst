ca65 V2.18 - Ubuntu 2.18-1
Main file   : HolaMundo.s
Current file: HolaMundo.s

000000r 1               .linecont       +               ; Permitir continuar lineas
000000r 1               .feature        c_comments      /* Soportar comentarios tipo C */
000000r 1               
000000r 1               ;Definir el segmento HEADER para que FCEUX reconozca el archivo .nes
000000r 1               ;como una imagen valida de un cartucho de NES
000000r 1               
000000r 1               .segment "HEADER"
000000r 1               
000000r 1               ; Configurar con Mapper NROM 0 con bancos fijos
000000r 1  4E 45 53 1A    .byte 'N', 'E', 'S', $1A    ; Firma de NES para el emulador
000004r 1  02             .byte $02                   ; PRG tiene 16k
000005r 1  01             .byte $01                   ; CHR tiene 8k (archivo chr)
000006r 1  00             .byte %00000000             ;NROM Mapper 0
000007r 1  00 00 00 00    .byte $0, $0, $0, $0, $0, $0
00000Br 1  00 00        
00000Dr 1               ; Fin del header
00000Dr 1               ;; Este Header se encuentra definido en el archivo link.x el cual
00000Dr 1               ;; define donde va a quedar en el archivo .NES final
00000Dr 1               
00000Dr 1               
00000Dr 1               ;Incluir el binario con las imagenes de la rom de caracteres
00000Dr 1               .segment "IMG"
000000r 1  00 00 00 00  .incbin "letras.chr"
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
002000r 1               
002000r 1               
002000r 1               ;Declaracion de variables en la pagina 0
002000r 1               ;; Esto es RWM (RAM), por ende se "reservan" bytes
002000r 1               ;; para luego ser usados como variables.
002000r 1               .segment "ZEROPAGE"
000000r 1  xx           	posX: .res 1
000001r 1  xx           	posY: .res 1
000002r 1               
000002r 1               ;;Segmento de codigo guardado en la ROM
000002r 1               .segment "CODE"
000000r 1               
000000r 1               ;Rutina de interrupcion (IRQ)
000000r 1               ;No es utilizada por ahora
000000r 1               irq:
000000r 1  40           	rti
000001r 1               
000001r 1               ;;Rutina de interrupcion (Reset)
000001r 1               ;;; Esta rutina se dispara cuando el nintendo se enciende
000001r 1               ;;; o se aprieta el boton de reset. Se encarga de inicializar
000001r 1               ;;; el hardware
000001r 1               reset:
000001r 1  78             SEI          ; desactivar IRQs
000002r 1  D8             CLD          ; desactivar modo decimal
000003r 1               
000003r 1               ;;Durante el encendido del Nintendo hay que respetar unos tiempos
000003r 1                 ;;hasta que el PPU se encuentra listo para ser utilizado.
000003r 1                 ;;A continuacion se siguen los pasos sugeridos en:
000003r 1                 ;; https://wiki.nesdev.com/w/index.php/Init_code
000003r 1  A2 40          LDX #$40
000005r 1  8E 17 40       STX $4017    ; disable APU frame IRQ
000008r 1  A2 FF          LDX #$FF
00000Ar 1  9A             TXS          ; Set up stack
00000Br 1  E8             INX          ; now X = 0
00000Cr 1  8E 00 20       STX $2000    ; disable NMI
00000Fr 1  8E 01 20       STX $2001    ; disable rendering
000012r 1  8E 10 40       STX $4010    ; disable DMC IRQs
000015r 1               
000015r 1               vblankwait1:       ; First wait for vblank to make sure PPU is ready
000015r 1  2C 02 20       BIT $2002
000018r 1  10 FB          BPL vblankwait1
00001Ar 1               
00001Ar 1               clrmem:
00001Ar 1  A9 00          LDA #$00
00001Cr 1  95 00          STA $0000, x
00001Er 1  9D 00 01       STA $0100, x
000021r 1  9D 00 03       STA $0300, x
000024r 1  9D 00 04       STA $0400, x
000027r 1  9D 00 05       STA $0500, x
00002Ar 1  9D 00 06       STA $0600, x
00002Dr 1  9D 00 07       STA $0700, x
000030r 1  A9 FE          LDA #$FE
000032r 1  9D 00 02       STA $0200, x
000035r 1  E8             INX
000036r 1  D0 E2          BNE clrmem
000038r 1               
000038r 1               vblankwait2:      ; Second wait for vblank, PPU is ready after this
000038r 1  2C 02 20       BIT $2002
00003Br 1  10 FB          BPL vblankwait2
00003Dr 1               
00003Dr 1               
00003Dr 1                 ;;Cargamos la paleta de colores.
00003Dr 1  20 rr rr       JSR SUBPaleta
000040r 1               
000040r 1               
000040r 1               
000040r 1                 ;; Ahora que las paletas estan cargadas, podemos dibujar el fondo
000040r 1  20 rr rr       JSR SUBDibujaFondo
000043r 1               
000043r 1                 ;; Encendemos el PPU
000043r 1                 ;; y el barrido vertical
000043r 1                 ;; y apuntamos el PPU a
000043r 1                 ;; la tabla 0 de sprites
000043r 1                 ;; y 1 para fondos
000043r 1               
000043r 1  A9 80          LDA #%10000000
000045r 1  8D 00 20       STA $2000
000048r 1               
000048r 1                 ;; Encendemos Sprites, Background y sin clipping en lado izquierdo
000048r 1  A9 1E          LDA #%00011110
00004Ar 1  8D 01 20       STA $2001
00004Dr 1               
00004Dr 1                 ;;Apagamos el scroll del background (fondo)
00004Dr 1  A9 00          LDA #$00
00004Fr 1  8D 05 20       STA $2005
000052r 1  8D 05 20       STA $2005
000055r 1               
000055r 1                 ;;Habilitamos las interrupciones
000055r 1  58             CLI
000056r 1               
000056r 1                 ;Limpiamos la posX y posY
000056r 1  A9 00          LDA #0
000058r 1  85 rr          STA posX
00005Ar 1  85 rr          STA posY
00005Cr 1               
00005Cr 1                 ;En el sprite 0, cargamos la flecha ($41)
00005Cr 1                 ;el sprite almacena:
00005Cr 1                 ;	 Posicion Y
00005Cr 1                 ;	 Indice ($41)
00005Cr 1                 ;  Atributos: FlipH ; FlipV ; Prioridad; 3xNC ; Paleta (00~01~10~11)
00005Cr 1                 ;	 Posicion X
00005Cr 1  A9 41          LDA #$41
00005Er 1  8D 01 02       STA $0201 ;Indice
000061r 1  A9 00          LDA #%00000000
000063r 1  8D 02 02       STA $0202
000066r 1                 ;Luego PosX y PosY se avanzan durante NMI
000066r 1               
000066r 1               
000066r 1               
000066r 1               
000066r 1               fin:
000066r 1               
000066r 1  4C rr rr       jmp fin
000069r 1               ;Rutina de interrupcion (NMI)
000069r 1               ;Esta rutina se dispara cuando la pantalla
000069r 1               ;se dibujo por completo, y el barrido vertical
000069r 1               ;esta volviendo al inicio. Deberia poder utilizarse
000069r 1               ;solo por 2250 ciclos aprox. Deberia dispararse 25 veces
000069r 1               ;por segundo o 50 con interlaceado
000069r 1               nmi:
000069r 1                 ;;Guardamos en el stack el estado del CPU (flags y acumulador)
000069r 1  48             PHA
00006Ar 1  08             PHP
00006Br 1  E6 rr          INC posX
00006Dr 1  A5 rr          LDA posX
00006Fr 1  8D 03 02       STA $0203
000072r 1  E6 rr          INC posY
000074r 1  A5 rr          LDA posY
000076r 1  85 rr          STA posY
000078r 1  8D 00 02       STA $0200
00007Br 1               
00007Br 1                 ;Ahora debemos copiar el sprite a la PPU, usamos DMA para eso:
00007Br 1               
00007Br 1                   ;Dado que en $0200~$02ff tenemos cargados los sprites
00007Br 1                 ;Utilizamos el DMA para transferir estos 256 bytes a memoria
00007Br 1                 ;de video en la ubicacion de los sprites.
00007Br 1  A9 00          LDA #$00
00007Dr 1  8D 03 20       STA $2003  ; cargamos en el DMA la parte baja de 0200
000080r 1  A9 02          LDA #$02
000082r 1  8D 14 40       STA $4014  ; cargamos en el DMA la parte alta de 0200 y comienza.
000085r 1                 ;Esto deberia bloquear el procesador hasta que termina.
000085r 1               
000085r 1                 ;;Ahora recuperamos el estado del CPU (flags y acumulador) y listo
000085r 1  28             PLP
000086r 1  68             PLA
000087r 1  40             RTI
000088r 1               
000088r 1               
000088r 1               
000088r 1               
000088r 1               
000088r 1               ;; Esta rutina dibuja el fondo (Background Tiles).
000088r 1               SUBDibujaFondo:
000088r 1  AD 02 20       LDA $2002             ; Hay que leer el PPU para resetear la posicion
00008Br 1  A9 20          LDA #$20
00008Dr 1  8D 06 20       STA $2006             ; Se carga la parte alta de $2000
000090r 1  A9 00          LDA #$00
000092r 1  8D 06 20       STA $2006             ; Se carga la parte baja de $2000
000095r 1  A2 00          LDX #$00
000097r 1               
000097r 1                 ;;Una pantalla entera tiene 32x30 tiles, o sea 960 bytes.
000097r 1                 ;;Pero el registro X es de 8 bits, por ende tenemos que cargar
000097r 1                 ;;de 256 bytes a la vez o usar modo indirecto indexado pero hay que
000097r 1                 ;;contar con 16 bits, asi que es mas facil cargarlo por partes.
000097r 1               
000097r 1                 ;;Cargamos los primeros 256 bytes
000097r 1               LoadBackgroundLoop:
000097r 1  BD rr rr       LDA MapaHolaMundo, x
00009Ar 1  8D 07 20       STA $2007              ;Grabamos el valor a PPU, que se autoincrementa
00009Dr 1  E8             INX                    ; incrementamos X para el loop.
00009Er 1  D0 F7          BNE LoadBackgroundLoop ; Si X pego la vuelta, se cargaron 256 bytes.
0000A0r 1               
0000A0r 1               
0000A0r 1               
0000A0r 1               LoadBackgroundLoop256:
0000A0r 1  BD rr rr       LDA MapaHolaMundo+256, x
0000A3r 1  8D 07 20       STA $2007
0000A6r 1  E8             INX
0000A7r 1  D0 F7          BNE LoadBackgroundLoop256
0000A9r 1               
0000A9r 1               LoadBackgroundLoop512:
0000A9r 1  BD rr rr       LDA MapaHolaMundo+512, x
0000ACr 1  8D 07 20       STA $2007
0000AFr 1  E8             INX
0000B0r 1  D0 F7          BNE LoadBackgroundLoop512
0000B2r 1               
0000B2r 1                 ;;Este ultimo loop tiene que ir desde 768 hasta 960 solamente
0000B2r 1               
0000B2r 1               LoadBackgroundLoop192:
0000B2r 1  BD rr rr       LDA MapaHolaMundo+512+256, x
0000B5r 1  8D 07 20       STA $2007
0000B8r 1  E8             INX
0000B9r 1  E0 C0          CPX #192
0000BBr 1  D0 F5          BNE LoadBackgroundLoop192
0000BDr 1               
0000BDr 1                ;;Este loop carga los registros de atributos que estan a continuacion de los tiles.
0000BDr 1                ;;Comienza apuntando el PPU a la memoria de atributos correspondiente
0000BDr 1               
0000BDr 1               LoadAttribute:
0000BDr 1  AD 02 20       LDA $2002
0000C0r 1  A9 23          LDA #$23
0000C2r 1  8D 06 20       STA $2006
0000C5r 1  A9 C0          LDA #$C0
0000C7r 1  8D 06 20       STA $2006
0000CAr 1  A2 00          LDX #$00
0000CCr 1               
0000CCr 1                 ;;Ahora barremos los atributos y los vamos pasando al PPU
0000CCr 1               LoadAttributeLoop:
0000CCr 1  BD rr rr       LDA MapaHolaMundo+960, x
0000CFr 1  8D 07 20       STA $2007
0000D2r 1  E8             INX
0000D3r 1  E0 40          CPX #64
0000D5r 1  D0 F5          BNE LoadAttributeLoop
0000D7r 1               
0000D7r 1                 ;;Todo listo, podemos volver
0000D7r 1  60             RTS
0000D8r 1               
0000D8r 1               SUBPaleta:
0000D8r 1  A9 3F        	lda #$3f
0000DAr 1  8D 06 20     	sta $2006
0000DDr 1  A9 00        	lda #$00
0000DFr 1  8D 06 20     	sta $2006
0000E2r 1  A2 21        	ldx #$21
0000E4r 1  8E 07 20     	stx $2007
0000E7r 1  A9 14        	lda #$14
0000E9r 1  8D 07 20     	sta $2007
0000ECr 1  A9 10        	lda #$10
0000EEr 1  8D 07 20     	sta $2007
0000F1r 1  A9 30        	lda #$30
0000F3r 1  8D 07 20     	sta $2007
0000F6r 1  8E 07 20     	stx $2007
0000F9r 1  A9 01        	lda #$01
0000FBr 1  8D 07 20     	sta $2007
0000FEr 1  A9 21        	lda #$21
000100r 1  8D 07 20     	sta $2007
000103r 1  A9 31        	lda #$31
000105r 1  8D 07 20     	sta $2007
000108r 1  8E 07 20     	stx $2007
00010Br 1  A9 06        	lda #$06
00010Dr 1  8D 07 20     	sta $2007
000110r 1  A9 16        	lda #$16
000112r 1  8D 07 20     	sta $2007
000115r 1  A9 26        	lda #$26
000117r 1  8D 07 20     	sta $2007
00011Ar 1  8E 07 20     	stx $2007
00011Dr 1  A9 09        	lda #$09
00011Fr 1  8D 07 20     	sta $2007
000122r 1  A9 19        	lda #$19
000124r 1  8D 07 20     	sta $2007
000127r 1  A9 29        	lda #$29
000129r 1  8D 07 20     	sta $2007
00012Cr 1  60           	RTS
00012Dr 1               
00012Dr 1               
00012Dr 1               MapaHolaMundo:
00012Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000131r 1  00 00 00 00  
000135r 1  00 00 00 00  
00013Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000141r 1  00 00 00 00  
000145r 1  00 00 00 00  
00014Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000151r 1  00 00 00 00  
000155r 1  00 00 00 00  
00015Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000161r 1  00 00 00 00  
000165r 1  00 00 00 00  
00016Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000171r 1  00 00 00 00  
000175r 1  00 00 00 00  
00017Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000181r 1  00 00 00 00  
000185r 1  00 00 00 00  
00018Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000191r 1  00 00 00 00  
000195r 1  00 00 00 00  
00019Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0001A1r 1  00 00 00 00  
0001A5r 1  00 00 00 00  
0001ADr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0001B1r 1  00 00 00 00  
0001B5r 1  00 00 00 00  
0001BDr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0001C1r 1  00 00 00 00  
0001C5r 1  00 00 00 00  
0001CDr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0001D1r 1  00 00 00 00  
0001D5r 1  00 00 00 00  
0001DDr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0001E1r 1  00 00 00 00  
0001E5r 1  00 00 00 00  
0001EDr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0001F1r 1  00 00 00 00  
0001F5r 1  00 00 00 00  
0001FDr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000201r 1  00 00 00 00  
000205r 1  00 00 00 00  
00020Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$28,$00,$2f,$00,$2c,$00,$21,$00
000211r 1  00 00 00 00  
000215r 1  28 00 2F 00  
00021Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000221r 1  00 00 00 00  
000225r 1  00 00 00 00  
00022Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000231r 1  00 00 00 00  
000235r 1  00 00 00 00  
00023Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000241r 1  00 00 00 00  
000245r 1  00 00 00 00  
00024Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$01,$01,$01,$2d,$35,$2e,$24,$2f,$01,$01
000251r 1  00 00 01 01  
000255r 1  01 2D 35 2E  
00025Dr 1  01 00 00 00  	.byte $01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000261r 1  00 00 00 00  
000265r 1  00 00 00 00  
00026Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000271r 1  00 00 00 00  
000275r 1  00 00 00 00  
00027Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000281r 1  00 00 00 00  
000285r 1  00 00 00 00  
00028Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000291r 1  00 00 00 00  
000295r 1  00 00 00 00  
00029Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0002A1r 1  00 00 00 00  
0002A5r 1  00 00 00 00  
0002ADr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0002B1r 1  00 00 00 00  
0002B5r 1  00 00 00 00  
0002BDr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0002C1r 1  00 00 00 00  
0002C5r 1  00 00 00 00  
0002CDr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0002D1r 1  00 00 00 00  
0002D5r 1  00 00 00 00  
0002DDr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0002E1r 1  00 00 00 00  
0002E5r 1  00 00 00 00  
0002EDr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0002F1r 1  00 00 00 00  
0002F5r 1  00 00 00 00  
0002FDr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000301r 1  00 00 00 00  
000305r 1  00 00 00 00  
00030Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000311r 1  00 00 00 00  
000315r 1  00 00 00 00  
00031Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000321r 1  00 00 00 00  
000325r 1  00 00 00 00  
00032Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000331r 1  00 00 00 00  
000335r 1  00 00 00 00  
00033Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000341r 1  00 00 00 00  
000345r 1  00 00 00 00  
00034Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000351r 1  00 00 00 00  
000355r 1  00 00 00 00  
00035Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000361r 1  00 00 00 00  
000365r 1  00 00 00 00  
00036Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000371r 1  00 00 00 00  
000375r 1  00 00 00 00  
00037Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000381r 1  00 00 00 00  
000385r 1  00 00 00 00  
00038Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000391r 1  00 00 00 00  
000395r 1  00 00 00 00  
00039Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0003A1r 1  00 00 00 00  
0003A5r 1  00 00 00 00  
0003ADr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0003B1r 1  00 00 00 00  
0003B5r 1  00 00 00 00  
0003BDr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0003C1r 1  00 00 00 00  
0003C5r 1  00 00 00 00  
0003CDr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0003D1r 1  00 00 00 00  
0003D5r 1  00 00 00 00  
0003DDr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0003E1r 1  00 00 00 00  
0003E5r 1  00 00 00 00  
0003EDr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0003F1r 1  00 00 00 00  
0003F5r 1  00 00 00 00  
0003FDr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000401r 1  00 00 00 00  
000405r 1  00 00 00 00  
00040Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000411r 1  00 00 00 00  
000415r 1  00 00 00 00  
00041Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000421r 1  00 00 00 00  
000425r 1  00 00 00 00  
00042Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000431r 1  00 00 00 00  
000435r 1  00 00 00 00  
00043Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000441r 1  00 00 00 00  
000445r 1  00 00 00 00  
00044Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000451r 1  00 00 00 00  
000455r 1  00 00 00 00  
00045Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000461r 1  00 00 00 00  
000465r 1  00 00 00 00  
00046Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000471r 1  00 00 00 00  
000475r 1  00 00 00 00  
00047Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000481r 1  00 00 00 00  
000485r 1  00 00 00 00  
00048Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000491r 1  00 00 00 00  
000495r 1  00 00 00 00  
00049Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0004A1r 1  00 00 00 00  
0004A5r 1  00 00 00 00  
0004ADr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0004B1r 1  00 00 00 00  
0004B5r 1  00 00 00 00  
0004BDr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0004C1r 1  00 00 00 00  
0004C5r 1  00 00 00 00  
0004CDr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0004D1r 1  00 00 00 00  
0004D5r 1  00 00 00 00  
0004DDr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0004E1r 1  00 00 00 00  
0004E5r 1  00 00 00 00  
0004EDr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0004F1r 1  00 00 00 00  
0004F5r 1  00 00 00 00  
0004FDr 1  00 04 09 07  	.byte $00,$04,$09,$07,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000501r 1  01 00 00 00  
000505r 1  00 00 00 00  
00050Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000511r 1  00 00 00 00  
000515r 1  00 00 00 00  
00051Dr 1  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000521r 1  00 00 00 00  
000525r 1  00 00 00 00  
00052Dr 1               
00052Dr 1               
00052Dr 1               
00052Dr 1               
00052Dr 1               
00052Dr 1               
00052Dr 1               ; Direcciones para las ISR
00052Dr 1               .segment "VECTORS"
000000r 1  rr rr        .word nmi
000002r 1  rr rr        .word reset
000004r 1  rr rr        .word irq
000004r 1               
